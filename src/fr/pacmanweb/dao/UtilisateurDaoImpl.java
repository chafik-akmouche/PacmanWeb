package fr.pacmanweb.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import fr.pacmanweb.beans.Utilisateur;

public class UtilisateurDaoImpl implements UtilisateurDao {
	private DAOFactory daoFactory;
	
	private static final String SQL_TROUVER = "SELECT id, email, pseudo, password, date_inscription FROM utilisateur WHERE utilisateur.pseudo = ?";
	private static final String SQL_INSERT = "INSERT INTO utilisateur (email, password, pseudo, date_inscription) VALUES (?, ?, ?, current_timestamp())";
	
	public UtilisateurDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	@Override
	public void inserer(Utilisateur utilisateur) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connexion = daoFactory.getConnection();
			//Object objets[] = {utilisateur.getEmail() ,utilisateur.getPassword(), utilisateur.getPseudo()};
			preparedStatement = DAOUtilitaire.initRequetePreparee(connexion, SQL_INSERT, true, utilisateur.getEmail(), utilisateur.getPassword(), utilisateur.getPseudo());
			//preparedStatement = DAOUtilitaire.initRequetePreparee(connexion, SQL_INSERT, true, objets);
			int statut = preparedStatement.executeUpdate();
			
			// 0 ligne insérée 
			if(statut == 0) { 
				throw new DAOException("Echec de l'ajout de l'utilisateur , aucune ligne ajoutée dans la table.");
			}
			
			/* Récupération de l'id auto-généré par la requête d'insertion */
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			
			if(autoGeneratedValues.next()) {
					utilisateur.setId(autoGeneratedValues.getLong(1));
			} else { 
				throw new DAOException("Échec de l'ajout de l'utilisateur en BDD, aucun ID auto-généré retourné.");
			}
			
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			DAOUtilitaire.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}
	
	
	@Override
	public Utilisateur trouver (String identifiant) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		Utilisateur utilisateur = null;
		
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUtilitaire.initRequetePreparee(connexion, SQL_TROUVER, false, identifiant);
			resSet = preparedStatement.executeQuery();
			if(resSet.next()) {
				utilisateur = map(resSet);
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtilitaire.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		
		return utilisateur;
	}
	
	
	private static Utilisateur map (ResultSet resultSet) throws SQLException {
		
		Utilisateur utilisateur = new Utilisateur();
		
		utilisateur.setId(resultSet.getLong(COLONNE_ID));
		utilisateur.setEmail(resultSet.getString(COLONNE_EMAIL));
		utilisateur.setPassword(resultSet.getString(COLONNE_PASSWORD));
		utilisateur.setPseudo(resultSet.getString(COLONNE_PSEUDO));
		utilisateur.setDate_inscription(resultSet.getTimestamp(COLONNE_DATE_INS));
		
		return utilisateur;
	}


}
